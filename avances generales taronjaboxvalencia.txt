🛠️ Resumen del Desarrollo del Frontend para TaronjaBoxValencia
🎯 Introducción
En el desarrollo del frontend para TaronjaBoxValencia, hemos construido una interfaz moderna, responsiva y coherente con la identidad visual del proyecto. El diseño sigue una estructura modular que facilita el mantenimiento y escalabilidad. Hemos trabajado tanto en el diseño como en la funcionalidad, empleando HTML, CSS, JavaScript (con Fetch API para la carga dinámica de datos) y PHP para la conexión con la base de datos.

🏗️ Estructura del Proyecto
Optamos por una estructura modular para organizar las diferentes secciones de la web, lo que facilita su gestión y mantenimiento. Cada sección (como "Quiénes somos" o "Blog") tiene su propio directorio con sus archivos correspondientes:

modulos/: Contiene las secciones del frontend.
backend/api/: Contiene las API para la carga dinámica de contenido.
assets/css/: Contiene las hojas de estilo compartidas.
Este enfoque modular permite que cualquier cambio en una sección no afecte a las demás, manteniendo una estructura clara y organizada.

🎨 Trabajo en CSS (Estilo y Diseño)
🔹 Paleta de Colores y Coherencia Visual
Se utilizó una paleta basada en el color darkorange (#ff7f50), en coherencia con la imagen corporativa de TaronjaBoxValencia.

Usamos variables CSS para mantener consistencia y facilitar futuros ajustes.
Se aplicaron gradientes y sombras sutiles para crear una experiencia visual moderna y atractiva.
🔹 Diseño Responsivo
El diseño responde a distintos tamaños de pantalla:

En dispositivos móviles, se reorganizan las secciones para mejorar la experiencia del usuario.
Las imágenes se adaptan dinámicamente a las dimensiones de la pantalla, manteniendo su calidad y proporciones.
🔹 Sección 'Quiénes Somos'
Se implementó una sección que muestra dinámicamente el contenido cargado desde la base de datos.

Diseño limpio, con una imagen destacada de ancho completo y un bloque de texto superpuesto.
Se usaron sombras y bordes redondeados para un aspecto profesional.
Mejora aplicada: Optimizamos la altura de la imagen y el texto para evitar que colisionaran con el footer.

⚙️ JavaScript (Dinamismo y Funcionalidad)
🔹 Uso de Fetch API
Implementamos la carga dinámica de contenido a través de fetch() en las secciones de "Quiénes somos" y "Blog".

Se evita así la carga innecesaria de contenido estático y se garantiza que el contenido siempre esté actualizado.
Ejemplo de lógica aplicada:

Al cargar la página de "Quiénes Somos", se realiza una solicitud a la API correspondiente.
Se manipula el DOM para mostrar el contenido de manera dinámica, mejorando el rendimiento y la flexibilidad.
🔹 Gestión de Errores
Añadimos control de errores en las solicitudes fetch().

Si la API falla, se muestra un mensaje en consola para su diagnóstico.
Esta práctica garantiza la robustez del sistema frente a posibles caídas o problemas de conexión.
Mejora aplicada: Corregimos el desplazamiento del texto y el comportamiento responsivo en dispositivos móviles.

🛠️ PHP (Conexión y Gestión de Datos)
🔹 Estructura Modular
Cada módulo del frontend tiene su correspondiente api_php en el backend. Por ejemplo:

api_quienes_somos.php para cargar el contenido de esa sección.
api_blog.php para mostrar las publicaciones del blog.
🔹 Conexión a la Base de Datos
Se creó una clase ConexionBD que gestiona de manera centralizada la conexión a MySQL.

Usamos consultas dinámicas para obtener datos de forma segura.
Se sanitizaron entradas de usuario para evitar ataques de inyección SQL.
Mejora aplicada: Se agregó una columna de imágenes en la tabla blog_posts para mejorar la presentación del contenido.

🚀 Mejoras Implementadas
Consistencia Visual: Mantuvimos una paleta de colores y un diseño uniforme en todas las secciones.
Optimización del Footer: Corregimos el comportamiento flotante en ciertas secciones, asegurando su correcta posición.
Carga Dinámica de Imágenes: Se ajustó el object-fit para garantizar que las imágenes cargadas desde la base de datos se adaptaran correctamente.
Responsividad: Mejoramos la experiencia en móviles con ajustes específicos en el layout y los tamaños de fuente.
Estructura Mantenible: Implementamos un diseño modular que permite añadir nuevas secciones sin afectar las existentes.
✅ Conclusión
El desarrollo del frontend de TaronjaBoxValencia logró crear una experiencia visual moderna y dinámica, alineada con su identidad corporativa.

Se logró una integración efectiva entre el frontend y el backend mediante APIs simples pero eficientes.
La estructura modular facilita su mantenimiento y escalabilidad para futuras mejoras.
Se aplicaron principios de buenas prácticas en CSS, JavaScript y PHP para garantizar un código claro y eficiente.
Este enfoque permitirá que el sitio crezca sin dificultades y mantenga su funcionalidad con facilidad. 🎉